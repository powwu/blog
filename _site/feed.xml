<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2023-10-02T15:19:06-04:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">/powwu/blog</title><subtitle></subtitle><entry><title type="html">Hold/release hiding keybinds for Waybar on Hyprland</title><link href="http://localhost:4000/blog/linux/rice/tutorial/2023/10/02/hold-release-binds-waybar.html" rel="alternate" type="text/html" title="Hold/release hiding keybinds for Waybar on Hyprland" /><published>2023-10-02T01:00:00-04:00</published><updated>2023-10-02T01:00:00-04:00</updated><id>http://localhost:4000/blog/linux/rice/tutorial/2023/10/02/hold-release-binds-waybar</id><content type="html" xml:base="http://localhost:4000/blog/linux/rice/tutorial/2023/10/02/hold-release-binds-waybar.html"><![CDATA[<p>Hey, it’s been a while :)</p>

<p><br /></p>

<p>Here’s a quick post to hopefully help someone desperately googling.  <strong>“How do I make hold and release keybinds for Waybar on Hyprland?”</strong></p>

<p>The current returned results on Google aren’t very helpful. You’ll see some people on the right track, but there’s lots of complicated solutions compared to what (imo) is the best solution to take. Here are two steps.</p>

<h2 id="step-1-change-waybar-to-be-hidden-on-default">Step 1: Change Waybar to be hidden on default</h2>

<p>In your <code class="language-plaintext highlighter-rouge">.config/waybar/config</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"start_hidden": true,
</code></pre></div></div>
<p>Note that it is a boolean and not a string. Waybar has a tough time parsing <code class="language-plaintext highlighter-rouge">"true"</code> as <code class="language-plaintext highlighter-rouge">true</code>.</p>

<p><br /></p>

<h2 id="step-2-add-binds-to-hyprland-config">Step 2: Add binds to Hyprland config</h2>

<p>In your <code class="language-plaintext highlighter-rouge">.config/hypr/hyprland.conf</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bind   =      , SUPER_L, exec, pkill -SIGUSR1 waybar
bindrt = SUPER, SUPER_L, exec, pkill -SIGUSR1 waybar
</code></pre></div></div>

<p>This assumes that <code class="language-plaintext highlighter-rouge">SUPER_L</code> is the key you’d use to hide and show the bar. You can adjust accordingly, just make sure to abide by the same format.</p>

<p>This relies on the <code class="language-plaintext highlighter-rouge">USR1</code> kill signal, which is programmed to toggle between showing and hiding Waybar.</p>

<p>The second line uses the <code class="language-plaintext highlighter-rouge">r</code> and <code class="language-plaintext highlighter-rouge">t</code> <a href="http://wiki.hyprland.org/Configuring/Binds/#bind-flags">flags</a>, so that the bind activates on release and does not interrupt with normal bindings.</p>

<p><br /></p>

<p><br /></p>

<p><em>P.S. I have several articles which I have pictures for, but have not written yet. Oh how my brain works.</em></p>]]></content><author><name></name></author><category term="linux" /><category term="rice" /><category term="tutorial" /><summary type="html"><![CDATA[Hey, it’s been a while :) Here’s a quick post to hopefully help someone desperately googling. “How do I make hold and release keybinds for Waybar on Hyprland?” The current returned results on Google aren’t very helpful. You’ll see some people on the right track, but there’s lots of complicated solutions compared to what (imo) is the best solution to take. Here are two steps. Step 1: Change Waybar to be hidden on default In your .config/waybar/config: "start_hidden": true, Note that it is a boolean and not a string. Waybar has a tough time parsing "true" as true. Step 2: Add binds to Hyprland config In your .config/hypr/hyprland.conf: bind = , SUPER_L, exec, pkill -SIGUSR1 waybar bindrt = SUPER, SUPER_L, exec, pkill -SIGUSR1 waybar This assumes that SUPER_L is the key you’d use to hide and show the bar. You can adjust accordingly, just make sure to abide by the same format. This relies on the USR1 kill signal, which is programmed to toggle between showing and hiding Waybar. The second line uses the r and t flags, so that the bind activates on release and does not interrupt with normal bindings. P.S. I have several articles which I have pictures for, but have not written yet. Oh how my brain works.]]></summary></entry><entry><title type="html">V: The fusion programming language I didn’t know I needed</title><link href="http://localhost:4000/blog/programming/2023/03/29/vlang-shill.html" rel="alternate" type="text/html" title="V: The fusion programming language I didn’t know I needed" /><published>2023-03-29T01:00:00-04:00</published><updated>2023-03-29T01:00:00-04:00</updated><id>http://localhost:4000/blog/programming/2023/03/29/vlang-shill</id><content type="html" xml:base="http://localhost:4000/blog/programming/2023/03/29/vlang-shill.html"><![CDATA[<h4 id="as-many-of-you-know-the-programming-language-i-am-most-comfortable-with-is-go-however-just-because-a-language-is-comfortable-doesnt-mean-its-perfect-enter-v">As many of you know, the programming language I am most comfortable with is <a href="https://go.dev">Go</a>. However, just because a language is <em>comfortable</em> doesn’t mean it’s perfect. Enter <a href="https://vlang.io">V</a>.</h4>

<p><img src="https://vlang.io/img/veasel.png" alt="" /></p>
<center><i>V's incredibly adorable mascot, the Veasel.</i></center>

<p><br /><br /></p>

<h2 id="pros">Pros</h2>

<p>Where do I even begin?</p>

<h3 id="the-syntax">The syntax</h3>
<p>According to their website, V’s syntax is about 80% identical to that of Go. Using the language, I believe it. Using V feels like Go on steroids sometimes. Here are some of the most important syntax changes for me:</p>

<h4 id="--error-checks">- Error checks</h4>
<p>In Go, error checks are frequent and bulky:</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">someFunction</span><span class="p">();</span>
<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
     <span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Compare this to V, which simplifies it to:</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="o">:=</span> <span class="n">someFunction</span><span class="p">()</span> <span class="n">or</span> <span class="p">{</span> <span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span> <span class="p">}</span>
</code></pre></div></div>

<p>As you can see, much cleaner.</p>

<p><br /></p>

<h4 id="--checking-for-presence-in-an-array">- Checking for presence in an array</h4>
<p>In Go, to check for a value in an array, you’d do something like this:</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">present</span> <span class="kt">bool</span>
<span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="k">var</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">arr</span><span class="p">;</span> <span class="n">do</span> <span class="p">{</span>
     <span class="k">if</span> <span class="k">var</span> <span class="o">==</span> <span class="m">2</span> <span class="p">{</span>
         <span class="n">present</span> <span class="o">=</span> <span class="no">true</span>
         <span class="k">break</span>
     <span class="p">}</span>
<span class="p">}</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">present</span><span class="p">)</span>
</code></pre></div></div>

<p>In V:</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">println</span><span class="p">(</span><span class="m">2</span> <span class="n">in</span> <span class="n">arr</span><span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<h4 id="--methods-on-primitive-types">- Methods on primitive types</h4>
<p>In Go, you’d do something like this:</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Given string `s`</span>
<span class="n">strings</span><span class="o">.</span><span class="n">Replace</span><span class="p">(</span><span class="n">strings</span><span class="o">.</span><span class="n">Replace</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">"a"</span><span class="p">,</span> <span class="s">"A"</span><span class="p">,</span> <span class="o">-</span><span class="m">1</span><span class="p">),</span> <span class="s">"b"</span><span class="p">,</span> <span class="s">"B"</span><span class="p">,</span> <span class="o">-</span><span class="m">1</span><span class="p">)</span>
</code></pre></div></div>

<p>Whereas in V:</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Given string `s`</span>
<span class="n">s</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sc">'a'</span><span class="p">,</span> <span class="sc">'A'</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sc">'b'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<h4 id="--quick-append-to-string">- Quick append to string</h4>
<p>In Go:</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Given string 's'</span>
<span class="n">s</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">"owo"</span><span class="p">)</span>
</code></pre></div></div>

<p>In V:</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Given string 's'</span>
<span class="n">s</span> <span class="o">+=</span> <span class="s">"owo"</span>
</code></pre></div></div>
<p><br /></p>
<h4 id="now-that-was-a-lot-of-syntax"><strong>Now that was a lot of syntax.</strong></h4>

<h3 id="crazy-fast-compilation">Crazy fast compilation</h3>
<p>V transpiles your code into C before compiling it, so it finishes shockingly quick. I’m talking <strong>half a second</strong> quick. You won’t believe it until you try it.</p>

<p><br /></p>

<h3 id="live-updates">Live updates</h3>
<p>V supports having a running program automatically update itself when code is compiled. This makes figuring out small bugs a breeze.</p>

<p><br /></p>

<h3 id="wide-range-of-official-libraries">Wide range of official libraries</h3>
<p>The V libraries comprise <a href="https://github.com/vlang/V/tree/master/examples">many, many different applications.</a></p>

<p><br /></p>

<h3 id="control-over-memory-management-methods">Control over memory management methods</h3>
<p>V is memory safe and efficient by default. However, V also provides <a href="https://github.com/vlang/v/blob/master/doc/docs.md#memory-management">many methods to manage memory.</a></p>

<p><br /></p>

<h3 id="transpile-c--v">Transpile C –&gt; V</h3>
<p>You can even translate DOOM into V code. <a href="https://www.youtube.com/watch?v=6oXrz3oRoEg">I’m not joking.</a></p>

<p><br /></p>

<h2 id="cons">Cons</h2>
<h3 id="only-one-variable-declaration-method">Only one variable declaration method</h3>
<p>V only supports the <code class="language-plaintext highlighter-rouge">n := val</code> method of declaration; it does <em>not</em> support <code class="language-plaintext highlighter-rouge">var n int</code>, which I use in Go frequently.</p>

<p><br /></p>

<h3 id="lacking-library-support">Lacking library support</h3>
<p>As with most small programming languages, a lot of niche topics are not covered by people’s open source projects. This could be a killer in some situations, as dealing with some APIs via straight web requests is even more of a pain than just using another language entirely.</p>

<p><br />
<br />
<br /></p>

<h2 id="final-thoughts">Final thoughts</h2>
<p>Despite what the former content may lead you to believe, I am not maining V in the forseeable future. Go gives me nearly all of the tools I need, and does so in an almost-perfect fashion. For some projects, however, V shines on top, especially for quick scripts. Anyways, my blog post for the month of March is done, so that’s good enough for me. Thank you for reading!</p>]]></content><author><name></name></author><category term="programming" /><summary type="html"><![CDATA[As many of you know, the programming language I am most comfortable with is Go. However, just because a language is comfortable doesn’t mean it’s perfect. Enter V. V's incredibly adorable mascot, the Veasel. Pros Where do I even begin? The syntax According to their website, V’s syntax is about 80% identical to that of Go. Using the language, I believe it. Using V feels like Go on steroids sometimes. Here are some of the most important syntax changes for me: - Error checks In Go, error checks are frequent and bulky: var, err := someFunction(); if err != nil { panic(err) } Compare this to V, which simplifies it to: var := someFunction() or { panic(err) } As you can see, much cleaner. - Checking for presence in an array In Go, to check for a value in an array, you’d do something like this: var present bool for _, var := range arr; do { if var == 2 { present = true break } } fmt.Println(present) In V: println(2 in arr) - Methods on primitive types In Go, you’d do something like this: // Given string `s` strings.Replace(strings.Replace(s, "a", "A", -1), "b", "B", -1) Whereas in V: // Given string `s` s.replace('a', 'A').replace('b', 'B') - Quick append to string In Go: // Given string 's' s = append(s, "owo") In V: // Given string 's' s += "owo" Now that was a lot of syntax. Crazy fast compilation V transpiles your code into C before compiling it, so it finishes shockingly quick. I’m talking half a second quick. You won’t believe it until you try it. Live updates V supports having a running program automatically update itself when code is compiled. This makes figuring out small bugs a breeze. Wide range of official libraries The V libraries comprise many, many different applications. Control over memory management methods V is memory safe and efficient by default. However, V also provides many methods to manage memory. Transpile C –&gt; V You can even translate DOOM into V code. I’m not joking. Cons Only one variable declaration method V only supports the n := val method of declaration; it does not support var n int, which I use in Go frequently. Lacking library support As with most small programming languages, a lot of niche topics are not covered by people’s open source projects. This could be a killer in some situations, as dealing with some APIs via straight web requests is even more of a pain than just using another language entirely. Final thoughts Despite what the former content may lead you to believe, I am not maining V in the forseeable future. Go gives me nearly all of the tools I need, and does so in an almost-perfect fashion. For some projects, however, V shines on top, especially for quick scripts. Anyways, my blog post for the month of March is done, so that’s good enough for me. Thank you for reading!]]></summary></entry><entry><title type="html">I have a blog now, I guess</title><link href="http://localhost:4000/blog/meta/2023/02/20/i-have-a-blog-now.html" rel="alternate" type="text/html" title="I have a blog now, I guess" /><published>2023-02-20T19:30:00-05:00</published><updated>2023-02-20T19:30:00-05:00</updated><id>http://localhost:4000/blog/meta/2023/02/20/i-have-a-blog-now</id><content type="html" xml:base="http://localhost:4000/blog/meta/2023/02/20/i-have-a-blog-now.html"><![CDATA[<h2 id="so-apparently-i-have-a-blog-now">So apparently I have a blog now.</h2>

<p>I know what you’re thinking.</p>

<blockquote>
  <p>Wow, that’s so 2010, why on earth would you think of doing this?</p>
</blockquote>

<p>To be quite frank with you, I’m not entirely sure. There are many possibilities for my inspiration, and because I <em>love</em> procrastination, I’d like to list them here.</p>

<p> </p>

<h1 id="journaling--mental-health">Journaling &amp; Mental Health</h1>
<p>As many of you may know, over the years I have struggled with keeping my brain chemicals from spilling all over the place. Essentially, my human essence is controlled by a first year chemistry student who doesn’t know what PPE is. Fortunately for me however, writing is a great way to provide order to the chaos. Even if it’s me rambling about silly (<em>and often quite stupid!</em>) nerd garbage, it gives me some sort of outlet that isn’t mainly logic and math.</p>

<p> </p>

<h1 id="everyone-else-is-doing-it-and-i-want-to-be-cool-too">Everyone else is doing it, and I want to be cool too.</h1>
<p>As I’m sure you’ve seen while scouring the internet, it feels like everyone who keeps some sort of online record keeps a blog as well. I’ve seen a wide variety of posts, from Linux and AI to which type of chair would best fit a dwarf. While reading these blogs, I would frequently ponder about what topics <em>I</em> would choose to write about. This mental list has gotten so large to the point where if I don’t start writing I will forget.</p>

<p> </p>

<h1 id="twitter-is-dumb-and-stupid-and-stupid-and-dumb">Twitter is dumb and stupid and stupid and dumb</h1>
<p>As of late, Elon has introduced the <strong><em>incredibly wonderful</em></strong> and <strong><em>definitely not controversial</em></strong> change of expanding Twitter Blue. This wouldn’t fase me much until recently, when Mr. Muskrat decided to paywall SMS 2FA.</p>

<p> </p>

<p><img src="https://media.discordapp.net/attachments/499222783679660053/1077396523236741181/image.png?width=400&amp;height=400" alt="" style="display:block; margin-left:auto; margin-right:auto" /></p>
<center><i>A bold move from someone who hauls bathroom sinks.</i></center>

<p> </p>

<p>This blogging platform allows me to write about whatever stupid crap is on my mind, just as Twitter did oh-so long ago. It also provides the added benefit of me not caring whether or not my post gets “likes” and “retweets”. I’m a very numbers-oriented person, so I do tend to shoot for high numbers at all costs (including my health!)</p>

<p> </p>

<h1 id="opportunity-to-improve-my-writing-skills">Opportunity to improve my writing skills</h1>
<p>The only thing worse than my ability to concentrate is my ability to write coherently. There are two types of sentences I tend to create:</p>

<blockquote>
  <p>A doorbell derives its name from the object which it tends to be nearest (a door) and the sound it makes (a bell).</p>
</blockquote>

<p>and</p>

<blockquote>
  <p>So it’s called a doorbell because it usually comes pretty close to a door, but not always, and as such the designers thought that naming it that way would provide ample clarification that it is indeed near a door.</p>
</blockquote>

<p>Notice how the first one manages to get the point across consisely, while the second one struggles (and even misses the “bell” part!). The end goal here is to cut down on type two sentences, and write more type one sentences.</p>

<p>I hope that with some practice, I can write better sentences and not sound like a blabbering idiot whenever I open my mouth.</p>

<p> </p>

<h2 id="conclusion">Conclusion</h2>
<p>Do I care whether or not anyone sees this? Not really. Does it make me sleep better at night knowing that my thoughts are out there? Absolutely.</p>

<p>As for posting frequency, I’m aiming to get one somewhat-mildly-edited word vomit rant out a month. If I don’t, I’ll buy you a soda.</p>

<p> </p>

<hr />

<p> </p>

<h1 id="ps">P.S.</h1>

<p>As I have been writing this, it has become clearer and clearer that the true reason was right in front of me the whole time. It turns out the best reason of all is the most simple:</p>

<p> </p>

<p><img src="https://media.discordapp.net/attachments/499222783679660053/1077398616827760740/image6-1.png?width=201&amp;height=282" alt="" style="display:block; margin-left:auto; margin-right:auto" /></p>]]></content><author><name></name></author><category term="meta" /><summary type="html"><![CDATA[So apparently I have a blog now.]]></summary></entry></feed>